#!/bin/bash
# build.sh
set -euo pipefail

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Validate environment
echo "Validating build environment..."

# Check Node.js version
if ! command_exists node; then
    echo "Error: Node.js not found. Please install Node.js 16+" >&2
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 16 ]; then
    echo "Error: Node.js 16+ required, found: $(node --version)" >&2
    exit 1
fi

# Check Rust
if ! command_exists cargo; then
    echo "Error: Rust/Cargo not found. Please install Rust" >&2
    exit 1
fi

# Check WebAssembly target
if ! rustup target list --installed | grep -q "wasm32-unknown-emscripten"; then
    echo "Error: WebAssembly target not installed. Run: rustup target add wasm32-unknown-emscripten" >&2
    exit 1
fi

echo "Setting up Emscripten environment..."

# Prefer local emsdk directory if available, otherwise fallback to ~/tools/emsdk
if [ -f ./emsdk/emsdk_env.sh ]; then
    source ./emsdk/emsdk_env.sh
elif [ -f ~/tools/emsdk/emsdk_env.sh ]; then
    source ~/tools/emsdk/emsdk_env.sh
else
    echo "Error: Emscripten SDK not found in ./emsdk/ or ~/tools/emsdk/" >&2
    echo "Please install Emscripten SDK as documented in README.md" >&2
    exit 1
fi

# Verify emcc is available
if ! command_exists emcc; then
    echo "Error: emcc not found. Emscripten SDK not properly activated" >&2
    exit 1
# --- Inject browser glue for generate/verify after every build ---
fi

echo "Cleaning previous builds..."
cargo clean
rm -rf dist


echo "Building WebAssembly..."
if ! cargo build --target wasm32-unknown-emscripten; then
    echo "Error: WebAssembly build failed" >&2
    exit 1
fi

echo "Fixing buffer reference..."
if [ ! -f src/vdf.js ]; then
    echo "Error: vdf.js not generated by cargo build" >&2
    exit 1
fi

sed -i 's/new as(buffer,pointer,size\/as\.BYTES_PER_ELEMENT)/new as(HEAPU8.buffer,pointer,size\/as.BYTES_PER_ELEMENT)/g' src/vdf.js

# Verify the fix was applied
if ! grep -q "HEAPU8.buffer" src/vdf.js; then
    echo "Warning: Buffer reference fix may not have been applied" >&2
fi

# Inject cwrap polyfill if missing (workaround for Emscripten/Cargo bug)
if ! grep -q "cwrap" src/vdf.js; then
    echo "Injecting cwrap polyfill into src/vdf.js..."
    # Insert after the first var Module=... line
    awk 'NR==1{print; print "\n// Polyfill for cwrap (injected by build.sh)\nif (typeof Module !== \"undefined\" && typeof Module.cwrap !== \"function\") {\n  Module.cwrap = function(ident, returnType, argTypes) {\n    var fn = Module[\"_\"+ident];\n    if (!fn) throw new Error(\"Function \"+ident+\" not found in WASM exports\");\n    return fn;\n  };\n}\n"; next} 1' src/vdf.js > src/vdf.js.tmp && mv src/vdf.js.tmp src/vdf.js
fi

echo "Linting TypeScript..."
if ! npx tslint --project .; then
    echo "Error: TypeScript linting failed" >&2
    exit 1
fi

echo "Compiling TypeScript..."
if ! npx tsc; then
    echo "Error: TypeScript compilation failed" >&2
    exit 1
fi

echo "Creating dist directory..."
mkdir -p dist

echo "Minifying JavaScript..."
if ! npx uglify-es dist/index.js > dist/index.min.js; then
    echo "Error: JavaScript minification failed" >&2
    exit 1
fi

echo "Copying WebAssembly files..."
cp src/vdf.* dist/
cp src/vdf-worker.js dist/

# Verify build outputs
echo "Verifying build outputs..."
REQUIRED_FILES=("dist/index.js" "dist/index.d.ts" "dist/vdf.js" "dist/vdf.wasm")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "Error: Required file missing: $file" >&2
        exit 1
    fi
done

echo "Build completed successfully!"
echo "Generated files:"
ls -la dist/
